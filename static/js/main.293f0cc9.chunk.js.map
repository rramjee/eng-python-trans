{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","styleLink","document","createElement","rel","href","head","appendChild","App","useState","value","setValue","style","height","width","alignItems","justifyContent","textAlign","backgroundImage","display","verticalAlign","horizontalAlign","Input","transparent","onChange","e","target","action","color","onClick","axios","post","then","response","console","log","getElementsByClassName","innerText","catch","err","content","placeholder","border","padding","borderRadius","className","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2LAAAA,EAAOC,QAAU,IAA0B,kC,8JCmC3C,IAAMC,EAAYC,SAASC,cAAc,QACzCF,EAAUG,IAAM,aAChBH,EAAUI,KAAO,iEACjBH,SAASI,KAAKC,YAAYN,GAGXO,MAnCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAqBb,OACE,yBAAKC,MAAO,CAACC,OAAO,QAASC,MAAM,QAASC,WAAW,SAAUC,eAAe,SAAUC,UAAU,SAAUC,gBAAiB,oDAAqDC,QAAQ,aAAcC,cAAe,SAAUC,gBAAgB,WAC/O,kBAACC,EAAA,EAAD,CAAOC,aAAW,EAACC,SANC,SAACC,GACzBd,EAASc,EAAEC,OAAOhB,QAKkCiB,OAAQ,CAACC,MAAO,OAAQC,QAAS,WAnBzE,KAATnB,GACDoB,IAAMC,KAAK,qDAAsD,CAAC,MAASrB,IAC1EsB,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZ/B,SAASkC,uBAAuB,kBAAkB,GAAGC,UAAYJ,EAASvB,SAE3E4B,OAAM,SAACC,GACNL,QAAQC,IAAII,GACZrC,SAASkC,uBAAuB,kBAAkB,GAAGC,UAAY,YAWqCG,QAAS,iBAAkBC,YAAY,WAAW7B,MAAO,CAAC8B,OAAO,iBAAkBC,QAAQ,OAAQC,aAAc,SACvN,uBAAGC,UAAU,iBAAiBjC,MAAO,CAACkC,UAAW,OAAQlB,MAAO,UAAhE,kBClBYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpD,SAASqD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.293f0cc9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, {useState} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Input } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const handleClick = () => {\r\n    if(value!== \"\"){\r\n      axios.post(\"https://eng-python-project.herokuapp.com/translate\", {\"input\": value})\r\n      .then((response) => {\r\n        console.log(response);\r\n        document.getElementsByClassName(\"sentiment-text\")[0].innerText = response.value;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        document.getElementsByClassName(\"sentiment-text\")[0].innerText = \"Error\"\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleValueChange = (e) => {\r\n    setValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div style={{height:\"100vh\", width:\"100vw\", alignItems:\"center\", justifyContent:\"center\", textAlign:\"center\", backgroundImage: \"linear-gradient(135deg, #667eea 0%, #764ba2 100%)\", display:\"table-cell\", verticalAlign: \"middle\", horizontalAlign:\"middle\"}}>\r\n        <Input transparent onChange={handleValueChange} action={{color: 'teal', onClick: () => handleClick(), content: \"GET SENTIMENT\"}} placeholder='Write...' style={{border:\"1px solid #fff\", padding:\"10px\", borderRadius: \"5px\"}} />\r\n        <p className=\"sentiment-text\" style={{marginTop: \"20px\", color: \"white\"}}>No Sentiment</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst styleLink = document.createElement(\"link\");\r\nstyleLink.rel = \"stylesheet\";\r\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\r\ndocument.head.appendChild(styleLink);\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}